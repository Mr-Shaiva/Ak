int getPivot(vector<int>& nums)
{
    int n=nums.size();
    int s = 0, e = n - 1;
    int mid = s + (e - s) / 2;
    while (s < e)
    {

        if (nums[mid] >= nums[0])
        {
            s = mid + 1;
        }
        else
        {
            e = mid;
        }
        mid = s + (e - s) / 2;
    }
    return s;
}

int BinarySearch(vector<int>& nums, int s, int e, int key)
{
    int n=nums.size();
    int start = s;
    int end = e;
    // int mid = (start + end) / 2;
    int mid = start + (end - start) / 2; // --> to avoid (2^31-1) + (2^31-1)

    while (start <= end)
    {

        if (nums[mid] == key)
        {
            return mid;
        }

        if (key > nums[mid])
        {
            start = mid + 1;
        }
        else
        {
            end = mid - 1;
        }

        // mid = (start + end) / 2;
        mid = start + (end - start) / 2;
    }
return -1;
}

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int pivot=getPivot(nums);
        cout<<pivot;
        int n=nums.size();
        if(target>=nums[pivot]&&target<=nums[n-1]){
            return BinarySearch(nums,pivot,n-1,target);
        }else{
            //cout<<"else";
            return BinarySearch(nums,0,pivot-1,target);
        }
    }
};
